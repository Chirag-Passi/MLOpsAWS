name: Trigger SageMaker Pipeline

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main      # Run on push to the main branch
  #     - develop   # You can list other branches as needed
  # pull_request:
  #   branches:
  #     - main      # Run on pull requests targeting the main branch
  #     - develop   # Run on pull requests targeting the develop branch

jobs:
  trigger-pipeline:
    runs-on: ubuntu-latest  # Run on a fresh Ubuntu environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Checkout the repository's code

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2  # Configure AWS credentials
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install Dependencies
      run: |
        # python -m pip install --upgrade pip
        pip install -r Random-Forest/Pipeline/requirement.txt  # Install any dependencies if you have a requirements.txt

    - name: Trigger SageMaker Pipeline
      run: |
        # Optional: Run a script or invoke the pipeline directly
        # python Random-Forest/Pipeline/official.py  # This should trigger the SageMaker pipeline from your GitHub repo
        execution_arn=$(python Random-Forest/Pipeline/official.py)  # Assuming the script returns the ARN
        echo "PipelineExecutionArn=$execution_arn" >> $GITHUB_ENV

    - name: Wait for SageMaker Pipeline to Complete
      id: wait-for-pipeline
      run: |
        # Poll SageMaker for the pipeline execution status until it's complete
        status="InProgress"
        while [[ "$status" == "InProgress" || "$status" == "Stopping" ]]; do
          echo "Waiting for pipeline to complete..."
          sleep 60  # Wait for 1 minute before checking again
          status=$(aws sagemaker describe-pipeline-execution --pipeline-execution-arn ${{ env.PipelineExecutionArn }} --query 'PipelineExecutionStatus' --output text)
          echo "Current Status: $status"
        done
        
        if [[ "$status" != "Succeeded" ]]; then
          echo "Pipeline execution failed with status: $status"
          exit 1  # Exit with an error if the pipeline didn't succeed
        else:
          echo "Pipeline execution succeeded!"

        
    - name: Model Approval
      if: success()
      run: |
        # Run the model approval script (make sure you have a script for model approval)
        python Random-Forest/Pipeline/code/ModelApproval.py  # Script for model approval

    - name: Endpoint Creation
      if: success()
      run: |
        # Run the endpoint creation script
        python Random-Forest/Pipeline/code/EndPointCreation.py  # Script for creating the endpoint
